$('#main-container').hide();
$('#main-container').fadeOut();
$('#controls').hide();
$('#controls').fadeOut();
$('#reply-tooltip').hide();
$('#copy-tooltip').hide();
$('#name').focus();

var time;
function rename() {
	var name = $('#name').val();
	if (isEmpty(name)) name = 'Guest';
	socket.emit('name', name);
	$('#prompt').fadeOut(200);
	$('#name-info').hide();
	$('#controls').animate({opacity: 'toggle'}, 500);
	$("#main-container").animate({ height: 'toggle', opacity: 'toggle' }, 500);
	$('#message').focus();
}
var socket = io();
socket.on('chats', data => {
  console.log(data);
	var reachedEnd = false;
	if (
		Math.abs(
			$('#chats')[0].scrollHeight -
				$('#chats').scrollTop() -
				$('#chats').outerHeight()
		) < 1
	) {
		reachedEnd = true;
	}
	$('#main-spinner').hide();
	var html = "";
	for(var d of data){
	  
	  var timeDiff = time - d.time;
	  var timeStr = "";
	  var secDiff = Math.floor(timeDiff / 1000);
	  var minDiff = Math.floor(timeDiff / (60 * 1000));
	  var hourDiff = Math.floor(timeDiff / (60 * 60 * 1000));
	  var dayDiff = Math.floor(timeDiff / (24 * 60 * 60 * 1000));
	  if(minDiff >= 60) minDiff = minDiff % 60;
	  if(hourDiff >= 24) hourDiff = hourDiff % 24;
	  if(secDiff >= 60) secDiff = secDiff % 60;
	  timeStr = (dayDiff? dayDiff + "d ": "") + (hourDiff? hourDiff + "h ": "") + (minDiff? minDiff + "m ": "") + (!minDiff? secDiff + "s ": "") + "ago";
	  html += '<div class="message">' + d.message + ' <span class="time">'+timeStr+'</span>' + (d.id? '<button class="delete" id="'+d.id+'">Delete</button>': "") + '</div>';
	}
  $('#chats').html(html);
  $('.delete').hide();
	if (reachedEnd){
		$('#chats').scrollTop(
			$('#chats')[0].scrollHeight - $('#chats')[0].clientHeight
		);
	}

	if (data.length == 0) {
		$('#chats').html('<span class="red">No chats yet.</span>');
	}
});

socket.on('who', data => {
	$('#who').html('');
	for (var p of data) {
		$('#who').append("<span style='color:" + p.color + "'>" + p.name + '<br>');
	}
});

socket.on('time', data => {
  time = data;
});

socket.on('timer', (msg)=> {
   socket.emit('check', msg);
   RestartTimer();      
});

// socketio.on("message_to_client", (data)=> {
//   RestartTimer();
// });

function reply(name) {
	if (
		$('#message')
			.val()
			.search('@' + name) == -1
	) {
		$('#message').val('@' + name + ' ' + $('#message').val());
	}
}
function send() {
	var message = $('#message').val();
	if (!isEmpty(message)) {
    if ( message == "bob"){      
      var happy = "Gussed the word correctly";
      var coo = Math.floor(Math.random() * 10);
      // return coo
      var fun = "'s lucky number is: " + coo;     socket.emit('check', happy);
      socket.emit('check', fun);
    }
    else {      
		  socket.emit('message', message);
    }
		$('#message').val('');
	}
}


function isEmpty(txt) {
	if (txt.replace(/\s/g, '').length) return false;
	else return true;
}
$(document).on('click', '.name', function(e) {
	e.preventDefault();
	reply($(this).text());
	$('#message').focus();
});
$(document).on('click', '.message-content', function(e) {
	var $temp = $("<input>");
  $("body").append($temp);
  $temp.val($(this).text()).select();
  document.execCommand("copy");
  $temp.remove();
});
$(document).on('click', '.delete', function(e) {
  socket.emit('delete', $(this).attr('id'));
});
$(document).on('mouseover', '.name', function() {
	$('#reply-tooltip').fadeIn(0);
	var offset = $(this).offset();
	var scrollTop = $(window).scrollTop();
	$('#reply-tooltip').css({
		top: offset.top + scrollTop + 30 + 'px',
		left: offset.left + 'px'
	});
});
$(document).on('mouseleave', '.name', function() {
	$('#reply-tooltip').fadeOut(0);
});
$(document).on('mouseover', '.message-content', function() {
	$('#copy-tooltip').fadeIn(0);
	var offset = $(this).offset();
	var scrollTop = $(window).scrollTop();
	$('#copy-tooltip').css({
		top: offset.top + scrollTop + 30 + 'px',
		left: offset.left + 'px'
	});
});
$(document).on('mouseleave', '.message-content', function() {
	$('#copy-tooltip').fadeOut(0);
	
});
$(document).on('mouseover', '.message', function(){
  $(this).find('.delete').show();
});
$(document).on('mouseleave', '.message', function(){
  $(this).find('.delete').hide();
});
$('#message').keypress(e => {
	var code = e.keyCode || e.which;
	if (code == 13) {
		send();
	}
});
$('#name').keypress(e => {
	var code = e.keyCode || e.which;
	if (code == 13) {
		rename();
	}
});

// recive message from server



// function sendMessage() {
// var msg = document.getElementById("message_input").value;
// socketio.emit("message_to_server", { message : msg});
// };
// Credit: Mateusz Rybczonec

const FULL_DASH_ARRAY = 283;
const WARNING_THRESHOLD = 10;
const ALERT_THRESHOLD = 5;


const COLOR_CODES = {
  info: {
    color: "green"
  },
  warning: {
    color: "orange",
    threshold: WARNING_THRESHOLD
  },
  alert: {
    color: "red",
    threshold: ALERT_THRESHOLD
  }
};

const TIME_LIMIT = 20;
let timePassed = 0;
let timeLeft = TIME_LIMIT;
let timerInterval = null;
let remainingPathColor = COLOR_CODES.info.color;

document.getElementById("app").innerHTML = `
<div class="base-timer">
  <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
    <g class="base-timer__circle">
      <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
      <path
        id="base-timer-path-remaining"
        stroke-dasharray="283"
        class="base-timer__path-remaining ${remainingPathColor}"
        d="
          M 50, 50
          m -45, 0
          a 45,45 0 1,0 90,0
          a 45,45 0 1,0 -90,0
        "
      ></path>
    </g>
  </svg>
  <span id="base-timer-label" class="base-timer__label">${formatTime(
    timeLeft
  )}</span>
</div>
`;


startTimer();

function onTimesUp() {
  clearInterval(timerInterval);
}

function startTimer() {

  timerInterval = setInterval(() => {
    timePassed = timePassed += 1;
    timeLeft = TIME_LIMIT - timePassed;
    document.getElementById("base-timer-label").innerHTML = formatTime(
      timeLeft
    );
    setCircleDasharray();
    setRemainingPathColor(timeLeft);

    if (timeLeft === 0) {
      onTimesUp();
    }
  }, 1000);
}
function RestartTimer(){
  const { alert, warning, info } = COLOR_CODES;
  if (timeLeft === 0){
    startTimer()
  }
  // onTimesUp()
  // const TIME_LIMIT = 20;
  timePassed = -1;
  timeLeft = TIME_LIMIT;
  setCircleDasharray();
  setRemainingPathColor(timeLeft);
  // let timerInterval = null;
  remainingPathColor = COLOR_CODES.info.color;
  // onTimesUp()

  document
  .getElementById("base-timer-path-remaining")
  .classList.remove(alert.color);
  document
  .getElementById("base-timer-path-remaining")
  .classList.remove(warning.color);
  document
  .getElementById("base-timer-path-remaining")
  .classList.add(info.color);
  

  // document.getElementById("app").innerHTML = `
  // <div class="base-timer">
  //   <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
  //     <g class="base-timer__circle">
  //       <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
  //       <path
  //         id="base-timer-path-remaining"
  //         stroke-dasharray="283"
  //         class="base-timer__path-remaining ${remainingPathColor}"
  //         d="
  //           M 50, 50
  //           m -45, 0
  //           a 45,45 0 1,0 90,0
  //           a 45,45 0 1,0 -90,0
  //         "
  //       ></path>
  //     </g>
  //   </svg>
  //   <span id="base-timer-label" class="base-timer__label">${formatTime(
  //     timeLeft
  //   )}</span>
  // </div>
  // `;
  // startTimer()

}
function formatTime(time) {
  const minutes = Math.floor(time / 60);
  let seconds = time % 60;

  if (seconds < 10) {
    seconds = `0${seconds}`;
  }

  return `${minutes}:${seconds}`;
}

function setRemainingPathColor(timeLeft) {
  const { alert, warning, info } = COLOR_CODES;
  if (timeLeft <= alert.threshold) {
    document
      .getElementById("base-timer-path-remaining")
      .classList.remove(warning.color);
    document
      .getElementById("base-timer-path-remaining")
      .classList.add(alert.color);
  } else if (timeLeft <= warning.threshold) {
    document
      .getElementById("base-timer-path-remaining")
      .classList.remove(info.color);
    document
      .getElementById("base-timer-path-remaining")
      .classList.add(warning.color);
  }
}

function calculateTimeFraction() {
  const rawTimeFraction = timeLeft / TIME_LIMIT;
  return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
}

function setCircleDasharray() {
  const circleDasharray = `${(
    calculateTimeFraction() * FULL_DASH_ARRAY
  ).toFixed(0)} 283`;
  document
    .getElementById("base-timer-path-remaining")
    .setAttribute("stroke-dasharray", circleDasharray);
}

